# -*- coding: utf-8 -*-
"""Detect_Color.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Y1R_AgSGGUupBzHhwKpaM4dX78lawvS
"""
from concurrent.futures import thread
import cv2
import numpy as np
import matplotlib.pyplot as plt
import sys

height = 480
width = 640

frame_width = 640
frame_height = 480

img = cv2.imread('slice.jpg',1)
img = cv2.resize(img, (width, height))


img_HSV = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)

muy = 0
arr_green = np.zeros((361,), np.uint32)
for i in range(0,img.shape[0]):
    for j in range(0,img.shape[1]):
      k = img_HSV[i,j]
      muy = muy + k[0]
      arr_green[k[0]] = arr_green[k[0]] + 1 
hist = arr_green.ravel()
#fig = plt.figure(figsize=(20,5))
#plt.plot(hist)
#plt.show()

muy = muy/(img_HSV.shape[1]*img_HSV.shape[0])

import math
w, h = img_HSV.shape[:2]
temp = 0.0
for x in range(0, img_HSV.shape[0]):
   for y in range(0, img_HSV.shape[1]):
      k = img_HSV[x,y]
      temp = temp + (muy - k[0]) ** 2
sigma = math.sqrt(temp/w/h)

print(muy)
print(sigma)

img_mask = np.zeros((w,h),np.uint16)
for x in range(0, img_HSV.shape[0]):
   for y in range(0, img_HSV.shape[1]):
      k = img_HSV[x,y]
      if (k[0]> muy - sigma) and (k[0] < muy + sigma):
         img_mask[x,y] = 1


cc = cv2.imwrite('4.jpg', img_mask*255)

kernal = np.ones((5,5),np.uint8)
erosion = cv2.erode(img_mask, kernal, iterations = 1)
cv2.imwrite('mask.jpg',erosion*255)
a = cv2.imread('mask.jpg',0)


ret, thresh = cv2.threshold(a, 100, 255, cv2.THRESH_BINARY_INV)
contours, hierarchy = cv2.findContours(image=thresh, mode=cv2.RETR_TREE, method=cv2.CHAIN_APPROX_NONE)
cv2.drawContours(image=img, contours=contours, contourIdx=-1, color=(0, 255, 0), thickness=2,
                     lineType=cv2.LINE_AA)
cv2.imshow('result', a)
cv2.imshow('img_mask',img)
if cv2.waitKey() == ord('q'):
    sys.exit()
cv2.destroyAllWindows()